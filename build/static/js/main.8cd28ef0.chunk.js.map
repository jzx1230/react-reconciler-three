{"version":3,"sources":["ReactTHREE.js","App.js","serviceWorker.js","index.js"],"names":["logConfig","createInstance","appendChildToContainer","appendChild","appendInitialChild","removeChildFromContainer","removeChild","insertInContainerBefore","insertBefore","prepareUpdate","commitUpdate","log","type","args","console","reconciler","ReactReconciler","supportsMutation","props","rootContainerInstance","hostContext","internalInstanceHandle","arguments","width","height","depth","BoxGeometry","parameters","MeshBasicMaterial","rotation","x","y","mesh","Mesh","undefined","Scene","fov","aspect","near","far","position","z","camera","PerspectiveCamera","antialias","renderer","WebGLRenderer","setSize","scene","createTextInstance","text","container","child","domElement","parent","render","geometry","material","add","before","instance","oldProps","newProps","currentHostContext","ox","oy","nx","ny","updatePayload","finishedWork","finalizeInitialChildren","getChildHostContext","getPublicInstance","getRootHostContext","prepareForCommit","resetAfterCommit","shouldSetTextContent","whatToRender","div","createContainer","updateContainer","App","useState","setRotation","useEffect","id","animate","requestAnimationFrame","prev","cancelAnimationFrame","color","Boolean","window","location","hostname","match","ReactTHREE","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cd28ef0.chunk.js","sourcesContent":["import ReactReconciler from \"react-reconciler\";\nimport {\n  BoxGeometry,\n  MeshBasicMaterial,\n  Mesh,\n  Scene,\n  PerspectiveCamera,\n  WebGLRenderer\n} from \"three\";\n\nconst logConfig = {\n  createInstance: true,\n  appendChildToContainer: true,\n  appendChild: true,\n  appendInitialChild: true,\n  removeChildFromContainer: true,\n  removeChild: true,\n  insertInContainerBefore: true,\n  insertBefore: true,\n  prepareUpdate: false,\n  commitUpdate: false\n};\n\nfunction log(type, args) {\n  if (logConfig[type] === true) {\n    console.log(`*** ${type} ***`);\n    console.log(args);\n  }\n}\n\nlet reconciler = ReactReconciler({\n  /* configuration for how to talk to the host environment */\n  /* aka \"host config\" */\n\n  supportsMutation: true,\n\n  createInstance(\n    type,\n    props,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    log(\"createInstance\", arguments);\n    switch (type) {\n      case \"threeBoxGeometry\": {\n        const { width, height, depth } = props;\n        return new BoxGeometry(width, height, depth);\n      }\n      case \"threeMeshBasicMaterial\": {\n        const { parameters } = props;\n        return new MeshBasicMaterial(parameters);\n      }\n      case \"threeMesh\": {\n        const {\n          rotation: { x, y }\n        } = props;\n        const mesh = new Mesh();\n        if (x !== undefined) {\n          mesh.rotation.x = x;\n        }\n        if (y !== undefined) {\n          mesh.rotation.y = y;\n        }\n        return mesh;\n      }\n      case \"threeScene\": {\n        return new Scene();\n      }\n      case \"threePerspectiveCamera\": {\n        const {\n          fov,\n          aspect,\n          near,\n          far,\n          position: { x, y, z }\n        } = props;\n        const camera = new PerspectiveCamera(fov, aspect, near, far);\n        if (x !== undefined) {\n          camera.position.x = x;\n        }\n        if (y !== undefined) {\n          camera.position.y = y;\n        }\n        if (z !== undefined) {\n          camera.position.z = z;\n        }\n        return camera;\n      }\n      case \"threeWebGLRenderer\": {\n        const { width, height, antialias } = props;\n        const renderer = new WebGLRenderer({\n          antialias\n        });\n        renderer.setSize(width, height);\n        return {\n          renderer,\n          scene: null,\n          camera: null\n        };\n      }\n      default:\n        return null;\n    }\n  },\n  createTextInstance(\n    text,\n    rootContainerInstance,\n    hostContext,\n    internalInstanceHandle\n  ) {\n    return null;\n  },\n\n  appendChildToContainer(container, child) {\n    log(\"appendChildToContainer\", arguments);\n    container.appendChild(child.renderer.domElement);\n  },\n  appendChild(parent, child) {\n    log(\"appendChild\", arguments);\n  },\n  appendInitialChild(parent, child) {\n    log(\"appendInitialChild\", arguments);\n    if (parent.renderer instanceof WebGLRenderer) {\n      switch (child.type) {\n        case \"Scene\":\n          parent.scene = child;\n          break;\n        case \"PerspectiveCamera\":\n          parent.camera = child;\n          break;\n        default:\n      }\n      if (parent.scene !== null && parent.camera !== null) {\n        parent.renderer.render(parent.scene, parent.camera);\n      }\n    }\n    switch (parent.type) {\n      case \"Mesh\": {\n        switch (child.type) {\n          case \"BoxGeometry\":\n            parent.geometry = child;\n            break;\n          case \"MeshBasicMaterial\":\n            parent.material = child;\n            break;\n          default:\n        }\n        break;\n      }\n      case \"Scene\": {\n        parent.add(child);\n        break;\n      }\n      default:\n    }\n  },\n\n  removeChildFromContainer(container, child) {\n    log(\"removeChildFromContainer\", arguments);\n    container.removeChild(child.renderer.domElement);\n  },\n  removeChild(parent, child) {\n    log(\"removeChild\", arguments);\n  },\n  insertInContainerBefore(container, child, before) {\n    log(\"insertInContainerBefore\", arguments);\n  },\n  insertBefore(parent, child, before) {\n    log(\"insertBefore\", arguments);\n  },\n\n  prepareUpdate(\n    instance,\n    type,\n    oldProps,\n    newProps,\n    rootContainerInstance,\n    currentHostContext\n  ) {\n    log(\"prepareUpdate\", arguments);\n    switch (type) {\n      case \"threeWebGLRenderer\": {\n        return true;\n      }\n      case \"threeMesh\":\n        const {\n          rotation: { x: ox, y: oy }\n        } = oldProps;\n        const {\n          rotation: { x: nx, y: ny }\n        } = newProps;\n        if (ox !== nx || oy !== ny) {\n          return {\n            rotation: newProps.rotation\n          };\n        }\n        break;\n      default:\n    }\n  },\n  commitUpdate(\n    instance,\n    updatePayload,\n    type,\n    oldProps,\n    newProps,\n    finishedWork\n  ) {\n    log(\"commitUpdate\", arguments);\n    switch (type) {\n      case \"threeWebGLRenderer\": {\n        if (updatePayload === true) {\n          const { renderer, scene, camera } = instance;\n          if (scene !== null && camera !== null) {\n            renderer.render(scene, camera);\n          }\n        }\n        break;\n      }\n      case \"threeMesh\":\n        if (updatePayload.rotation !== undefined) {\n          const {\n            rotation: { x, y }\n          } = updatePayload;\n          if (x !== undefined) {\n            instance.rotation.x = x;\n          }\n          if (y !== undefined) {\n            instance.rotation.y = y;\n          }\n        }\n        break;\n      default:\n    }\n  },\n\n  finalizeInitialChildren() {},\n  getChildHostContext() {},\n  getPublicInstance() {},\n  getRootHostContext() {},\n  prepareForCommit() {},\n  resetAfterCommit() {},\n  shouldSetTextContent() {\n    return false;\n  }\n});\n\nexport default {\n  render(whatToRender, div) {\n    let container = reconciler.createContainer(div, false, false);\n    reconciler.updateContainer(whatToRender, container, null, null);\n  }\n};\n","/* eslint react/jsx-no-undef:0 */\nimport React, { useState, useEffect } from \"react\";\n\nconst width = 300;\nconst height = 300;\n\nfunction App() {\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    let id = -1;\n    function animate() {\n      id = requestAnimationFrame(animate);\n      setRotation(prev => ({\n        x: prev.x + 0.01,\n        y: prev.y + 0.01\n      }));\n    }\n    animate();\n    return () => {\n      cancelAnimationFrame(id);\n    };\n  }, []);\n  return (\n    <threeWebGLRenderer width={width} height={height} antialias>\n      <threeScene>\n        <threeMesh rotation={rotation}>\n          <threeBoxGeometry width={1} height={1} depth={1} />\n          <threeMeshBasicMaterial\n            parameters={{\n              color: 0x00ff00\n            }}\n          />\n        </threeMesh>\n      </threeScene>\n      <threePerspectiveCamera\n        fov={75}\n        aspect={width / height}\n        near={0.1}\n        far={1000}\n        position={{\n          z: 5\n        }}\n      />\n    </threeWebGLRenderer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactTHREE from \"./ReactTHREE\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactTHREE.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}